#include "pluto.h"

static double alpha, pe;

/* ********************************************************************* */
void Init (double *us, double x1, double x2, double x3)
/*
 *
 *
 *
 *********************************************************************** */
{
  double vj, cs, Mach;
  double lor, vy_in, rhob, rhom, pm, pb, hb, hm, eta, vjet;
double sigma, rxyz,rxyzsq,x10,x20,x30, x10wind, x20wind, x30wind, rxyzsqwind, rxyzR;

  static int first_call = 1;



/*WIND ORIGIN COORDINATES SOS ADJUST EACH TIME AT MIDDLE OF GRID SOS
*/
x10=60.0;
x20=0.0;
x30=60.0;

/*SOS IN GAMMA RAYS, distances are smaller
and orbital separation matters. Jet base is therefore other than 
the binary companion stellar wind origin.
Say binary companion is located at 25,0,25.NO! SOS! The binary separation is 4*10 to the 12 cm. SOS SUPER SOS  The orbit period is 13 days, while the domain crossing time of the jet is a mere 20min. So we take the binary companion to be still during a model run. 
*/
x10wind=400.0;
x20wind=0.0;
x30wind=400.0;
/* -- set ambient values -- */

/*THESE GO TO INITIAL DISK WIND APPROX.
*/
 rxyz = sqrt((x1-x10)*(x1-x10) + (x2-x20)*(x2-x20) + (x3-x30)*(x3-x30));
 rxyzsqwind=(x1-x10wind)*(x1-x10wind) + (x2-x20wind)*(x2-x20wind) + (x3-x30wind)*(x3-x30wind);
rxyzR=sqrt(rxyzsq);


  g_gamma = 4.0/3.0;

/*  g_unitLength = 1.67e-24; /* reference density (\rho_0) in units of gr/cmˆ3 */

/*  g_unitVelocity = 3.0e10;    /* reference velocity (v_0) in units of cm/sec */
  
/*  g_unitDensity = 1.0e10;  /* reference length (L_0) in cm */


/* PLUTO 4.1 style has vhanged in units dimensions' definition  */ 
#define UNIT_DENSITY 1.67e-24 /* reference density (\rho_0) in units of gr/cmˆ3 */
#define UNIT_LENGTH 1.0e10    /* reference length (L_0) in cm */
#define UNIT_VELOCITY 3.0e10 /* reference velocity (v_0) in units of cm/sec */

  alpha = 1.0 - g_inputParam[RM]*g_inputParam[RM]/g_inputParam[BETA];

  pe    = 0.5*g_inputParam[BETA]*g_inputParam[BM]*g_inputParam[BM];
/*
 pe    = 0.5*g_inputParam[BETA];
*/

/*
  us[RHO] = 1.e3;
*/
us[RHO] = (100000000000.0)/(rxyzsqwind);
/*
if ((((x1-x10)*(x1-x10))+((x3-x30)*(x3-x30))) > 20.00){
if ((((x1-x10)*(x1-x10))+((x2-x20)*(x2-x20))+((x3-x30)*(x3-x30))) < 100.00){
*/
if ((((x1-x10)*(x1-x10))+((x3-x30)*(x3-x30))) < 100.00){
if(x2<20){
us[RHO] = (100000000000.0/(pow(x2,2.0)+0.5));
us[PRS] = pe*1.0;
}
}

/*
NOW ACCRETION DISK SETUP
*/
/*
 if ( (x2)< (0.001+((rxyzR-3.0)/5.0))){
 if   (x2 >0.00){
*/


 if ( (x2)< (0.01+((rxyz-3.0)/5.0))){
 if   (x2 >0.00){
/*
SOS the disk is around the black hole, not the star!!
so use x(i), not x(i)wind coordinates for it!
*/
if ((((x1-x10)*(x1-x10))+((x3-x30) *(x3-x30))) > 50.00){
  
if ((((x1-x10)*(x1-x10))+((x3-x30)*(x3-x30))) < 1000.0){
  

/*
SOS WE REMOVE THE ACCRETION DISK, COS NO NEED TO MESS WITH UNNECESSARY
EFFECTS NOW> WE JUST FOCUS ON THE INNER JETS FOR THE TIME BEING.
*/
/*
accretion disk density assumed to fall as 1/r (not squared)
away from its center. Just a first crude approx.
*/
/*
 us[RHO] = (100000000000.0/(rxyz));

    us[PRS] = 0.10 ;
*/


}  

}
}  
}



/*
  us[RHO] = (1000.0/(rxyz*rxyz));
*/


  us[VX1] = 0.0;
  us[VX2] = 0.0;
  us[VX3] = 0.0;

  us[BX1] = 0.0;
  us[BX2] = 0.0;
  us[BX3] = 0.0;
  

us[PRS] = pe*100.0;
rxyzsq=(x1-x10)*(x1-x10) + (x2-x20)*(x2-x20) + (x3-x30)*(x3-x30);

 us[AX1] = us[AX2] = us[AX3] = 0.0;

  if (first_call){
    first_call = 0;
    vj   = sqrt(1.0 - 1.0/100.);
    cs   = sqrt(g_gamma*pe/(us[RHO] + pe*g_gamma/(g_gamma-1.0)));
    Mach = vj/cs;

x10=60.0;
x20=0.0;
x30=60.0;
/* -- set ambient values -- */

/*THESE GO TO INITIAL DISK WIND APPROX.
*/
 rxyz = sqrt((x1-x10)*(x1-x10) + (x2-x20)*(x2-x20) + (x3-x30)*(x3-x30));
 rxyzsq=(x1-x10)*(x1-x10) + (x2-x20)*(x2-x20) + (x3-x30)*(x3-x30);

    printf ("Mach number = %12.6e\n",Mach);

/* ----- estimate jet velocity --------- */
    
    lor   = 10.0;
    vy_in = sqrt(1.0 - 1.0/lor/lor);
    rhob = g_inputParam[RHO_IN];
    rhom = 1.e3;
    pm   = pb = pe;
    hb   = 1.0 + g_gamma/(g_gamma - 1.0)*pb/rhob;
    hm   = 1.0 + g_gamma/(g_gamma - 1.0)*pm/rhom;

    eta  = rhob*hb/(rhom*hm)*lor*lor;
    vjet = sqrt(eta)/(1.0 + sqrt(eta))*vy_in;
    printf (" Estimated jet velocity = %f\n",vjet);

/* ---- estimate sigma (= b^2/rho) ---- */

    sigma = g_inputParam[RM]*g_inputParam[RM]*(0.5 - 2.0*log(g_inputParam[RM]));
/*
    printf (" sigma = %f\n",1.0/sigma);
 printf (" edo ore0.5 = %f\n",pe);
*/ 
 }

}
 
/* ********************************************************************* */
void Analysis (const Data *d, Grid *grid)
/* 
 *
 *
 *********************************************************************** */
{

}

/* ********************************************************************* */
void UserDefBoundary (const Data *d, RBox *box, int side, Grid *grid) 
/*! 
 *  Assign user-defined boundary conditions.
 *
 * \param [in/out] d  pointer to the PLUTO data structure containing
 *                    cell-centered primitive quantities (d->Vc) and 
 *                    staggered magnetic fields (d->Vs, when used) to 
 *                    be filled.
 * \param [in] box    pointer to a RBox structure containing the lower
 *                    and upper indices of the ghost zone-centers/nodes
 *                    or edges at which data values should be assigned.
 * \param [in] side   specifies on which side boundary conditions need 
 *                    to be assigned. side can assume the following 
 *                    pre-definite values: X1_BEG, X1_END,
 *                                         X2_BEG, X2_END, 
 *                                         X3_BEG, X3_END.
 *                    The special value side == 0 is used to control
 *                    a region inside the computational domain.
 * \param [in] grid  pointer to an array of Grid structures.
 *
 *********************************************************************** */
{ 
  int     i, j, k, nv;

  double  prof, lor, pr_in, vy_in, bz_in, *r;
  double  rho_in, rho_out, vx_out, vy_out, vz_out;
  double  pr_out,  bx_out, by_out, bz_out;
/*
  double  prof, lor, pr_in, vy_in, bz_in, *r, *rx, *ry, *rz, *radius, r1test;
*/ 
double  *rx, *ry, *rz, *radius, r1test;

 double  x10,x20,x30,x0,y0,z0;
x10=60.0;
x20=0.0;
x30=60.0;
x0=x10;
y0=x20;
z0=x30;

  #ifdef STAGGERED_MHD
   #error Boundary not implemented for Staggered MHD
  #endif

  if (side == X2_BEG){
    if (box->vpos == CENTER){
      r = grid[IDIR].x;
       rx = grid[IDIR].x;
        ry = grid[JDIR].x;
        rz = grid[KDIR].x;
      BOX_LOOP(box,k,j,i){

        rho_out = d->Vc[RHO][k][2*JBEG - j - 1][i];            
        EXPAND(vx_out =  d->Vc[VX1][k][2*JBEG - j - 1][i];  ,
               vy_out = -d->Vc[VX2][k][2*JBEG - j - 1][i];  ,
               vz_out =  d->Vc[VX3][k][2*JBEG - j - 1][i];)

        EXPAND(bx_out =  d->Vc[BX1][k][2*JBEG - j - 1][i];  ,
               by_out =  d->Vc[BX2][k][2*JBEG - j - 1][i];  ,
               bz_out = -d->Vc[BX3][k][2*JBEG - j - 1][i];)             
 
      pr_out  = d->Vc[PRS][k][2*JBEG - j - 1][i];

        prof = (r[i] <= 1.0 ? 1.0 : 0.0);

        lor   = 10.0;
        vy_in = sqrt(1.0 - 1.0/lor/lor);






  
          if( (((sqrt(  (rz[k]-z0)*(rz[k]-z0))) <=1.00)) && (sqrt(  (rx[i]-x0)*(rx[i]-x0))<=1.00)){

        prof = 1.0;
       
        bz_in = lor*g_inputParam[BM]*g_inputParam[RM]/r[i];
        
pr_in = alpha*pe;      
/*   
        if (r[i] <= g_inputParam[RM]) {
*/
       if( (((sqrt(  (rz[k]-z0)*(rz[k]-z0))) <=g_inputParam[RM])) && (sqrt(  (rx[i]-x0)*(rx[i]-x0))<=g_inputParam[RM])){

          bz_in = lor*g_inputParam[BM]*r[i]/g_inputParam[RM];
  
       pr_in = pe*(alpha + 2.0/g_inputParam[BETA]*(1.0 - r[i]*r[i]/g_inputParam[RM]/g_inputParam[RM]));
        }
      }else{
        prof = 0.0;
      
      }  


if(rz[k]<21.0) {
        prof = 0.0;
        }






/*


        if (r[i] <= 1.0) {
          prof = 1.0;
          bz_in = lor*g_inputParam[BM]*g_inputParam[RM]/r[i];
          pr_in = alpha*pe;         
          if (r[i] <= g_inputParam[RM]) {
            bz_in = lor*g_inputParam[BM]*r[i]/g_inputParam[RM];
            pr_in = pe*(alpha + 2.0/g_inputParam[BETA]*(1.0 - r[i]*r[i]/g_inputParam[RM]/g_inputParam[RM]));
          }
        }else{
          prof = 0.0;
        }  

*/




double  pipi, theta0, theta1, phi1, speedbulk, speedx, speedy, speedz, speedtotal, factorx, factory, factorz;
int tinterval, tblob, tinteger;

pipi=3.141592653;
/*initiate theta0 at pi/8, i.e. 1/4 of 3D domain

SOS need t<1000 so that precession is lt pi/2 SOS else hqave to center ze jet and enlarge ze 
comp. domain !
*/
theta0=(pipi/8.0);


theta1=((2.0*pipi/14000000.0)*g_time+theta0);


/*
let us make it precess faster for demo purposes, exposing
time-delay effects SOS 140915
*/
theta1=((2.0*pipi/70.0)*g_time+theta0);

/*
SOS NO PRECESSION WITH PHI ANGLE SET TO ZERO
phi1=(pipi/9.0);
*/
/*
phi1=0.5;
*/

phi1=0.0;


/*
speedbulk=sqrt((vx_out*vx_out)+(vy_out*vy_out)+(vz_out*vz_out));
*/
vy_in=g_inputParam[BETA];

speedbulk=vy_in;
speedx = speedbulk*sin(phi1)*cos(theta1);
vx_out=speedx;
speedy = speedbulk*cos(phi1);
speedz = speedbulk*sin(phi1)*sin(theta1);
vz_out=speedz;
speedtotal=sqrt((speedx*speedx)+(speedy*speedy)+(speedz*speedz));
factorx=sin(phi1)*cos(theta1);
factory=cos(phi1);
factorz=sin(phi1)*sin(theta1);

/*
print1 ("speedx  = %f\n",speedx);
print1 ("speedy  = %f\n",speedy)print1 ("Bm  = %f\n",bm);;
print1 ("speedz  = %f\n",speedz);
print1 ("speedwhole  = %f\n",sqrt(speedx*speedx + speedy*speedy + speedz*speedz));
print1 ("speedbulk  = %f\n",speedbulk);
*/



/*
original setup, with x, y, z, jet velocity components
      d->Vc[RHO][k][j][i] = rho_out - (rho_out - g_inputParam[RHO_IN])*prof;
      EXPAND(d->Vc[VX][k][j][i] = 0.0*vx_out*((1.0 - prof)+0.1);              ,
             d->Vc[VY][k][j][i] = ((vy_out - (vy_out - vy_in)))*prof;   ,
             d->Vc[VZ][k][j][i] = 0.0*vz_out*(1.0 - prof);)
*/



       rho_in=g_inputParam[RHO_IN]*10000000000;
       rho_out=g_inputParam[RHO_IN]*10000;
/*
        d->Vc[RHO][k][j][i] = rho_out - (rho_out - g_inputParam[RHO_IN])*prof;
*/
/*     we now save the old working setup and try to bring back precession
        EXPAND(d->Vc[VX1][k][j][i] = vx_out*(1.0 - prof);              ,
               d->Vc[VX2][k][j][i] = vy_out - (vy_out - vy_in)*prof;   ,
               d->Vc[VX3][k][j][i] = vz_out*(1.0 - prof);)  
*/
/*
sos 150915 we must set up the x z components of speed to be non zero within the prof
range, not the opposite! sos 
*/






/*280915 here we define the interval time and the blob duration time. tblob
formulates the first part of tinterval, the rest is the null time*/
tinterval=10;
tblob=3;
/*here we set the integer part of the time*/
tinteger=(int)(g_time);


/* try to get modulus % to run on real numbers or floats
floor(a/b)*b + a%b = a
*/
/* code snippet to get the modulus of a division
int a = 5;
int b = 3;

if (a % b != 0) {
   printf("The remainder is: %i", a%b);
}
*/
if ((tinteger%tinterval) < tblob)
    {
    /*jet ON */
    EXPAND(d->Vc[VX1][k][j][i] = vx_out*(1.0 - prof)+speedx*prof;              ,
               d->Vc[VX2][k][j][i] = vy_out - (vy_out - speedy)*prof;   ,
               d->Vc[VX3][k][j][i] = vz_out*(1.0 - prof)+speedz*prof;) 
     
    }
    else
    {
    /* jet OFF*/
    EXPAND(d->Vc[VX1][k][j][i] = vx_out*(1.0 - prof);              ,
               d->Vc[VX2][k][j][i] = vy_out*(1.0 - prof);     ,
               d->Vc[VX3][k][j][i] = vz_out*(1.0 - prof);) 
    
    }

 
/*no change for B with jet on off for now*/
        EXPAND(d->Vc[BX1][k][j][i] = bx_out*(1.0 - prof);            ,
               d->Vc[BX2][k][j][i] = by_out*(1.0 - prof);            ,
               d->Vc[BX3][k][j][i] = bz_out - (bz_out - bz_in)*prof; )
  
      d->Vc[PRS][k][j][i] = pr_out - (pr_out - pr_in)*prof;
      }
    }
  }
}

